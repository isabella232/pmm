// Code generated by go-swagger; DO NOT EDIT.

package rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListAlertingRulesReader is a Reader for the ListAlertingRules structure.
type ListAlertingRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAlertingRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAlertingRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListAlertingRulesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAlertingRulesOK creates a ListAlertingRulesOK with default headers values
func NewListAlertingRulesOK() *ListAlertingRulesOK {
	return &ListAlertingRulesOK{}
}

/*ListAlertingRulesOK handles this case with default header values.

A successful response.
*/
type ListAlertingRulesOK struct {
	Payload *ListAlertingRulesOKBody
}

func (o *ListAlertingRulesOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/List][%d] listAlertingRulesOk  %+v", 200, o.Payload)
}

func (o *ListAlertingRulesOK) GetPayload() *ListAlertingRulesOKBody {
	return o.Payload
}

func (o *ListAlertingRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAlertingRulesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertingRulesDefault creates a ListAlertingRulesDefault with default headers values
func NewListAlertingRulesDefault(code int) *ListAlertingRulesDefault {
	return &ListAlertingRulesDefault{
		_statusCode: code,
	}
}

/*ListAlertingRulesDefault handles this case with default header values.

An unexpected error response.
*/
type ListAlertingRulesDefault struct {
	_statusCode int

	Payload *ListAlertingRulesDefaultBody
}

// Code gets the status code for the list alerting rules default response
func (o *ListAlertingRulesDefault) Code() int {
	return o._statusCode
}

func (o *ListAlertingRulesDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/ia/Rules/List][%d] ListAlertingRules default  %+v", o._statusCode, o.Payload)
}

func (o *ListAlertingRulesDefault) GetPayload() *ListAlertingRulesDefaultBody {
	return o.Payload
}

func (o *ListAlertingRulesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAlertingRulesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListAlertingRulesBody list alerting rules body
swagger:model ListAlertingRulesBody
*/
type ListAlertingRulesBody struct {

	// If true, Integrated Alerting rule files will be re-read from disk.
	Reload bool `json:"reload,omitempty"`
}

// Validate validates this list alerting rules body
func (o *ListAlertingRulesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertingRulesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertingRulesBody) UnmarshalBinary(b []byte) error {
	var res ListAlertingRulesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertingRulesDefaultBody list alerting rules default body
swagger:model ListAlertingRulesDefaultBody
*/
type ListAlertingRulesDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list alerting rules default body
func (o *ListAlertingRulesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertingRulesDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListAlertingRules default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertingRulesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertingRulesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListAlertingRulesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListAlertingRulesOKBody list alerting rules OK body
swagger:model ListAlertingRulesOKBody
*/
type ListAlertingRulesOKBody struct {

	// Integrated Alerting rules.
	Rules []*RulesItems0 `json:"rules"`
}

// Validate validates this list alerting rules OK body
func (o *ListAlertingRulesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAlertingRulesOKBody) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAlertingRulesOk" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAlertingRulesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAlertingRulesOKBody) UnmarshalBinary(b []byte) error {
	var res ListAlertingRulesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0 Rule represents Integrated Alerting rule.
swagger:model RulesItems0
*/
type RulesItems0 struct {

	// Rule name.
	Name string `json:"name,omitempty"`

	// Rules status: enabled or disabled.
	Enabled bool `json:"enabled,omitempty"`

	// Rule description.
	Help string `json:"help,omitempty"`

	// Rule parameters.
	Params []*RulesItems0ParamsItems0 `json:"params"`

	// Rule default duration.
	DefaultFor string `json:"default_for,omitempty"`

	// Rule set duration.
	For string `json:"for,omitempty"`
}

// Validate validates this rules items0
func (o *RulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RulesItems0) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(o.Params) { // not required
		return nil
	}

	for i := 0; i < len(o.Params); i++ {
		if swag.IsZero(o.Params[i]) { // not required
			continue
		}

		if o.Params[i] != nil {
			if err := o.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0ParamsItems0 Param repsesents a single Integrated Alerting rule parameter.
swagger:model RulesItems0ParamsItems0
*/
type RulesItems0ParamsItems0 struct {

	// Parameter name.
	Name string `json:"name,omitempty"`

	// Parameter description.
	Help string `json:"help,omitempty"`

	// ParamUnit Integrated Alerting rule parameter unit.
	// Enum: [PARAM_UNIT_INVALID PERCENTAGE]
	Unit *string `json:"unit,omitempty"`

	// ParamType Integrated Alerting rule parameter type.
	// Enum: [PARAM_TYPE_INVALID FLOAT]
	Type *string `json:"type,omitempty"`

	// Parameter minimal value (float).
	MinValue float32 `json:"min_value,omitempty"`

	// Parameter maximum value (float).
	MaxValue float32 `json:"max_value,omitempty"`

	// Parameter set value (float).
	DefaultValue float32 `json:"default_value,omitempty"`

	// Parameter set value (float).
	Value float32 `json:"value,omitempty"`
}

// Validate validates this rules items0 params items0
func (o *RulesItems0ParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rulesItems0ParamsItems0TypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_UNIT_INVALID","PERCENTAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0ParamsItems0TypeUnitPropEnum = append(rulesItems0ParamsItems0TypeUnitPropEnum, v)
	}
}

const (

	// RulesItems0ParamsItems0UnitPARAMUNITINVALID captures enum value "PARAM_UNIT_INVALID"
	RulesItems0ParamsItems0UnitPARAMUNITINVALID string = "PARAM_UNIT_INVALID"

	// RulesItems0ParamsItems0UnitPERCENTAGE captures enum value "PERCENTAGE"
	RulesItems0ParamsItems0UnitPERCENTAGE string = "PERCENTAGE"
)

// prop value enum
func (o *RulesItems0ParamsItems0) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0ParamsItems0TypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0ParamsItems0) validateUnit(formats strfmt.Registry) error {

	if swag.IsZero(o.Unit) { // not required
		return nil
	}

	// value enum
	if err := o.validateUnitEnum("unit", "body", *o.Unit); err != nil {
		return err
	}

	return nil
}

var rulesItems0ParamsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PARAM_TYPE_INVALID","FLOAT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0ParamsItems0TypeTypePropEnum = append(rulesItems0ParamsItems0TypeTypePropEnum, v)
	}
}

const (

	// RulesItems0ParamsItems0TypePARAMTYPEINVALID captures enum value "PARAM_TYPE_INVALID"
	RulesItems0ParamsItems0TypePARAMTYPEINVALID string = "PARAM_TYPE_INVALID"

	// RulesItems0ParamsItems0TypeFLOAT captures enum value "FLOAT"
	RulesItems0ParamsItems0TypeFLOAT string = "FLOAT"
)

// prop value enum
func (o *RulesItems0ParamsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rulesItems0ParamsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0ParamsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0ParamsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0ParamsItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0ParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
